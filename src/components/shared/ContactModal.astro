---
const CLICKUP_LIST_ID = "901208081795";
const CLICKUP_TOKEN = "pk_164654581_FYIXK9MP3SYQXODTNIGJQJTZIBE464FO";
---

<div id="contactModal" class="fixed inset-0 bg-gradient-to-br from-gray-900/60 to-gray-900/80 backdrop-blur-xl hidden z-50 flex items-center justify-center">
    <div class="bg-gradient-to-b from-box-bg/80 to-box-bg/90 backdrop-blur-2xl border border-box-border/30 rounded-3xl p-8 md:p-10 w-11/12 max-w-lg shadow-2xl transform transition-all duration-500 scale-95 opacity-0 modal-content">
        <div class="flex justify-between items-center mb-6">
            <h3 class="text-xl font-semibold text-heading-1">Get Started</h3>
            <button id="closeModal" class="text-heading-3 hover:text-heading-1">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>

        <form id="contactForm" class="space-y-6">
            <input type="hidden" id="selectedPlan" name="selectedPlan" value="">
            <div>
                <label for="email" class="block text-heading-2 mb-2 font-medium">Email Address *</label>
                <input 
                    type="email" 
                    id="email" 
                    name="email" 
                    required
                    class="w-full px-4 py-3 rounded-xl border border-box-border/50 bg-box-bg/50 backdrop-blur-md focus:outline-none focus:ring-2 focus:ring-[#5671FF]/50 transition-all duration-300 dark:text-white text-heading-2 placeholder:text-heading-3"
                    placeholder="your@email.com"
                >
            </div>

            <div>
                <label for="description" class="block text-heading-2 mb-2 font-medium">Project Description (Optional)</label>
                <textarea 
                    id="description" 
                    name="description" 
                    rows="4"
                    class="w-full px-4 py-3 rounded-xl border border-box-border/50 bg-box-bg/50 backdrop-blur-md focus:outline-none focus:ring-2 focus:ring-[#5671FF]/50 transition-all duration-300 dark:text-white text-heading-2 placeholder:text-heading-3"
                    placeholder="Tell us about your project..."
                ></textarea>
            </div>

            <div class="text-sm text-heading-3">
                We'll contact you soon to discuss your project and provide a customized solution.
            </div>

            <button 
                type="submit"
                class="w-full px-6 py-3.5 rounded-xl text-center font-medium bg-gradient-to-br from-[#2B3A67] to-[#5671FF] text-white hover:from-[#2B3A67]/90 hover:to-[#5671FF]/90 hover:shadow-lg hover:shadow-[#5671FF]/30 transition-all duration-300 transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed"
            >
                <span class="submit-text">Submit Request</span>
                <span class="loading-text hidden">
                    <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Processing...
                </span>
                <span class="success-text hidden">
                    <svg class="w-5 h-5 inline-block mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    Sent Successfully!
                </span>
            </button>
        </form>
    </div>
</div>

<script define:vars={{ CLICKUP_LIST_ID, CLICKUP_TOKEN }}>
    function setupModal() {
        const modal = document.getElementById('contactModal');
        const closeBtn = document.getElementById('closeModal');
        const form = document.getElementById('contactForm');
        const getStartedBtns = document.querySelectorAll('[data-open-modal]');
        const selectedPlanInput = document.getElementById('selectedPlan');

        getStartedBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                const planName = btn.getAttribute('data-plan');
                console.log('Selected plan:', planName); // Pour le dÃ©bogage
                selectedPlanInput.value = planName;
                modal.classList.remove('hidden');
                document.body.style.overflow = 'hidden';
                
                setTimeout(() => {
                    const modalContent = modal.querySelector('.modal-content');
                    if (modalContent) {
                        modalContent.classList.add('show');
                    }
                }, 10);
            });
        });

        closeBtn.addEventListener('click', () => {
            modal.classList.add('hidden');
            document.body.style.overflow = 'auto';
        });

        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.classList.add('hidden');
                document.body.style.overflow = 'auto';
            }
        });

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const submitButton = form.querySelector('button[type="submit"]');
            const submitText = submitButton.querySelector('.submit-text');
            const loadingText = submitButton.querySelector('.loading-text');
            const successText = submitButton.querySelector('.success-text');
            
            submitButton.disabled = true;
            submitText.classList.add('hidden');
            loadingText.classList.remove('hidden');
            submitButton.classList.remove('from-[#2B3A67]', 'to-[#5671FF]');
            submitButton.classList.add('from-gray-400', 'to-gray-500');

            const formData = new FormData(form);
            const email = formData.get('email');
            const description = formData.get('description');
            const selectedPlan = formData.get('selectedPlan');

            try {
                const taskData = {
                    name: email,
                    description: `Plan: ${selectedPlan}\n\n${description || "No description provided"}`,
                    list_id: CLICKUP_LIST_ID,
                    assignees: [],
                    tags: [selectedPlan],
                    status: "TO DO",
                    priority: 3,
                    due_date: 0,
                    due_date_time: false,
                    time_estimate: 0,
                    start_date: 0,
                    start_date_time: false,
                    notify_all: true,
                    parent: null,
                    links_to: null,
                    check_required_custom_fields: true
                };

                const response = await fetch('https://api.clickup.com/api/v2/list/' + CLICKUP_LIST_ID + '/task', {
                    method: 'POST',
                    headers: {
                        'Authorization': CLICKUP_TOKEN,
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    },
                    body: JSON.stringify(taskData)
                });

                if (!response.ok) {
                    throw new Error('Failed to create task');
                }

                loadingText.classList.add('hidden');
                successText.classList.remove('hidden');
                submitButton.classList.remove('from-gray-400', 'to-gray-500');
                submitButton.classList.add('from-green-500', 'to-green-600');

                setTimeout(() => {
                    modal.classList.add('hidden');
                    document.body.style.overflow = 'auto';
                    form.reset();
                    
                    setTimeout(() => {
                        submitText.classList.remove('hidden');
                        successText.classList.add('hidden');
                        submitButton.disabled = false;
                        submitButton.classList.remove('from-green-500', 'to-green-600');
                        submitButton.classList.add('from-[#2B3A67]', 'to-[#5671FF]');
                    }, 500);
                }, 2000);

            } catch (error) {
                console.error('Error creating task:', error);
                loadingText.classList.add('hidden');
                submitText.classList.remove('hidden');
                submitButton.disabled = false;  
                submitButton.classList.remove('from-gray-400', 'to-gray-500');
                submitButton.classList.add('from-[#2B3A67]', 'to-[#5671FF]');
                showMessage('Please try again later.', true);
            }
        });
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', setupModal);
    } else {
        setupModal();
    }
</script>

<style>
    .modal-content {
        transform: scale(0.95);
        opacity: 0;
        transition: all 0.3s ease-in-out;
    }

    .modal-content.show,
    #contactModal:not(.hidden) .modal-content {
        transform: scale(1);
        opacity: 1;
    }
</style> 